- name: create ssl signed key
  command: openssl genrsa -des3 -out chronos.key -passout "env:CHRONOS_KEY_PASSWORD"
  environment:
    CHRONOS_KEY_PASSWORD: "{{ key_password }}"

- name: sign cert
  command: openssl req -new -x509 -key chronos.key -passin "env:CHRONOS_KEY_PASSWORD" -subj "/C={{ item.country|default('') }}/ST={{ item.state|default('') }}/L={{ item.city|default('') }}/O={{ item.organization|default('') }}/OU={{ item.unit|default('') }}/CN={{ item.name }}/emailAddress={{ item.email|default('') }}/" -out self-signed-chronos.pem
  environment:
    CHRONOS_KEY_PASSWORD: "{{ key_password }}"
  with_items: openssl_self_signed

- name: extract pcks12
  command: openssl pkcs12 -inkey chronos.key -passin "env:CHRONOS_KEY_PASSWORD" -name chronos -in self-signed-chronos.pem -password "env:CHRONOS_PKCS_PASSWORD" -export -out chronos.pkcs12
  environment:
    CHRONOS_KEY_PASSWORD: "{{ key_password }}"
    CHRONOS_PKCS_PASSWORD: "{{ pkcs_password }}"

- name: create keystore dir
  file: path="{{ chronos_keystore_path | dirname }}" state=directory

- name: generate keystore
  command: keytool -importkeystore -srckeystore chronos.pkcs12 -srcalias chronos -srcstorepass $CHRONOS_PKCS_PASSWORD -srcstoretype PKCS12 -destkeystore "{{ chronos_keystore_path}}" -deststorepass $CHRONOS_JKS_PASSWORD
  environment: 
    CHRONOS_PKCS_PASSWORD: "{{ pkcs_password }}"
    CHRONOS_JKS_PASSWORD: "{{ jks_password }}"

